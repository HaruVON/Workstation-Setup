################################################################################
#      _________  _   _ ____   ____ 
#     |__  / ___|| | | |  _ \ / ___|
#       / /\___ \| |_| | |_) | |    
#      / /_ ___) |  _  |  _ <| |___ 
#     /____|____/|_| |_|_| \_\\____|
#                              
#
################################################################################

## Startup ##
# If not running interactively, do not do anything
[[ $- != *"i"* ]] && return

# Load TMUX at BOOT
export LD_LIBRARY_PATH=$HOME/local/lib
if [ ! -e $HOME/.NO_TMUX ]; then
    if [ -e $HOME/bin/tmux ]; then
    #    [[ -z "$TMUX" ]] && TERM=xterm-256color $HOME/bin/tmux
        [[ -z "$TMUX" ]] && exec $HOME/bin/tmux -2
    elif which tmux > /dev/null 2>&1; then
        [[ -z "$TMUX" ]] && exec tmux -2
    fi
fi


function cd_list() {
    emulate -L zsh
    ls
}

if echo $chpwd_functions | grep -vq "cd_list" ; then
	chpwd_functions=(${chpwd_functions[@]} "cd_list")
fi


## Global varibles ##
REMOTE_HOST="domainname.com"
REMOTE_USER=""
NICKNAME="Devin"
CONFIG_PATH="$HOME/.config/zsh"

## Options ##
#setopt emacs
# add `|' to output redirections in the history
setopt histallowclobber
# alert me if something failed
setopt printexitvalue

# use the vi navigation keys (hjkl) besides cursor keys in menu completion

# case-insensitive and partial-word then substring
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z} m:[-._]=[-._] r:|[-./_]=** r:|=*' '+l:|=*'

## Check network settings ##
 ping -c 1 1.1.1.1 > /dev/null 2>&1
 connected=$?
 if [ $connected -eq 0 ]
 then
     export EXT=$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)
     export HIP=`dig +short $REMOTE_HOST`
 else
     echo "Network Unreachable"
     export EXT=0
     export HIP=1
 fi

## Source Plugins ##
#source $HOME/plugins/zsh-history-substring-search/zsh-history-substring-search.plugin.zsh
#source $HOME/plugins/tmux/tmux.plugin.zsh
#source $HOME/plugins/git/git.plugin.zsh
#source $HOME/plugins/mosh/mosh.plugin.zsh
#source $HOME/plugins/sudo/sudo.plugin.zsh
#source $HOME/plugins/zsh_reload/zsh_reload.plugin.zsh

# Cant figure out the prompt command and where it's coming from so defaulting to else
## Phil prompt ##
function set_phil_prompt() {
    if [ -e $CONFIG_PATH/phil.sh ]; then
        #prompt off
        #source $CONFIG_PATH/phil.sh
        #return 0
	return 1
    fi
    return 1
}


## Host Specific ##

## Add bins to PATH ##
# Add ~/bin to path
if [ -d $HOME/bin ]
then
    export PATH=$PATH:$HOME/bin 
fi

export PATH=$PATH:/usr/games/


## Sources ##

# Autojumps
if [ -e /usr/share/autojump/autojump.sh ]; then
    source /usr/share/autojump/autojump.sh
fi
# Connect to the correct DBUS
if [ -e "$HOME/bin/discover_session_bus_address.sh" ]; then
    source $HOME/bin/discover_session_bus_address.sh
fi

# Set dir-colors if present
if [ -e /home/$USER/.dir_colors ]; then
    eval `dircolors /home/$USER/.dir_colors`
fi

## Exports ##

## Finish Setup ##
source $CONFIG_PATH/.aliases
source $CONFIG_PATH/.functions

## Welcome Message ##
welcome_message
set_phil_prompt


# Syntax Highlighting must be sourced last for some reason, per github..
#if [ -e $HOME/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh ]; then
#    source $HOME/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh
#fi

# WSL DISPLAY
#export LIBGL_ALWAYS_INDIRECT=1
#sudo /etc/init.d/dbus start &> /dev/null
#export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0 #GWSL


#cpp-run() {
#    echo "Compiling file..."
#    g++ -o "$1" "$1.cpp"
#    echo "Compiled! Enter input :D"
#    ./"$1"
#}
# cpp-run filename

#c-run() {
#    echo "Compiling file..."
#    gcc -o "$1" "$1.c"
#    echo "Compiled! Enter input :D"
#    ./"$1"
#}
# c-run filename

# Add git branch if its present to PS1
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# Pass the function to the color parser of the terminal to colorize the branch name.
#if [ "$color_prompt" = yes ]; then
#    if [[ ${EUID} == 0 ]] ; then
#        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\h\[\033[01;34m\] \W $(parse_git_branch)\$\[\033[00m\] '
#    else
#        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w $(parse_git_branch)\$\[\033[00m\] '
#    fi
#else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h \w \$ '
#fi
#unset color_prompt force_color_prompt

#gurl() {
#    curl -i https://git.io -F "url=$1" \
#    -F "code=$2"
#}

# Usage
# gurl https://github.com/anshumanv anshumanv

# Usage (requires connected device)
# Saves the screenshot with name screen.png
# cap

#cf() {
#    mkdir "CF#$1" &&\
#    cd "CF#$1" &&\
#    touch inp.txt &&\
#    touch out.txt && \
#    curl -L "https://files.aashutosh.dev/cpp.cpp" -o A.cpp
#}

# Usage: cf 549
# The above command initialzes, Your CF Round folder and downloads your sample template.
# https://files.aashutosh.dev/cpp.cpp refers to link of your template

#matlab-run() {
#    matlab -nodesktop -nosplash -r "$1"
#}
# matlab-run filename

#gif2webm() {
#    ffmpeg -i $1.gif -c vp9 -b:v 0 -crf 41 $1.webm
#}
# gif2webm gif-name-without-format



# Pyenv Setup
# New but not working
#export PYENV_ROOT="$HOME/.pyenv"
#command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
#eval "$(pyenv init -)"

#OLD but working
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv virtualenv-init -)"

# PIPX packages pathing
export PATH="$HOME/.local/bin:$PATH"

# NVM Pathing
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
